package com.example.demo.service.impl;

import java.io.ByteArrayOutputStream;

import java.io.IOException;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.demo.dto.PostProductDto;
import com.example.demo.entity.Category;
import com.example.demo.entity.Product;
import com.example.demo.exception.service.ProductServiceException;
import com.example.demo.exception.service.custom.CategoryNotFound;
import com.example.demo.exception.service.custom.ProductNotFound;
import com.example.demo.repository.ICategoryRepository;
import com.example.demo.repository.IProductRepository;
import com.example.demo.service.IProductService;
@Service
@Transactional
public class ProductServiceImpl implements IProductService {

	@Autowired
	IProductRepository productRepo;
@Autowired
ICategoryRepository categoryRepo;
	public static byte[] compressBytes(byte[] data) 
	{
		Deflater deflater = new Deflater();
		deflater.setInput(data);
		deflater.finish();

		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
		byte[] buffer = new byte[1024];
		while (!deflater.finished()) {
			int count = deflater.deflate(buffer);
			outputStream.write(buffer, 0, count);
		}
		try {
			outputStream.close();
		} catch (IOException e) {
		}

		return outputStream.toByteArray();
	}

	public static byte[] decompressBytes(byte[] data) {
		Inflater inflater = new Inflater();
		inflater.setInput(data);
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
		byte[] buffer = new byte[1024];
		try {
			while (!inflater.finished()) {
				int count = inflater.inflate(buffer);
				outputStream.write(buffer, 0, count);
			}
			outputStream.close();
		} catch (IOException ioe) {
		} catch (DataFormatException e) {
		}
		return outputStream.toByteArray();
	}


	@Override
	public String addProduct(PostProductDto product) throws ProductServiceException, IOException {
		// TODO Auto-generated method stub
		Category currentCategory=categoryRepo.findByCategoryName(product.getCategoryName()).orElseThrow(()-> new CategoryNotFound("Category Not Found"));
Product productTemp=new Product(product.getProductId(), product.getProductName(), compressBytes(product.getFile().getBytes()),product.getProductColor(), product.getProductPrice(), currentCategory);
productRepo.save(productTemp);	
return "Product Added Succesfully";
	}

	@Override
	public PostProductDto getProductByName(String text) throws ProductServiceException {
		// TODO Auto-generated method stub
		Product product=productRepo.findByProductName(text).orElseThrow(()-> new ProductNotFound("Product not found with the name"));
	PostProductDto productTemp=new PostProductDto(product.getProductId(), product.getProductName(), decompressBytes(product.getImageContent()), product.getProductColor(), product.getProductPrice(), product.getCategory().getCategoryId(),product.getCategory().getCategoryName());
		return null;
	}

}
